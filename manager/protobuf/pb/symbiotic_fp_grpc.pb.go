// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.2
// source: symbiotic-fp/protobuf/symbiotic_fp.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CelestiaServiceClient is the client API for CelestiaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CelestiaServiceClient interface {
	StateRootSignIDs(ctx context.Context, in *StateRootSignIDsRequest, opts ...grpc.CallOption) (*StateRootSignIDsResponse, error)
}

type celestiaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCelestiaServiceClient(cc grpc.ClientConnInterface) CelestiaServiceClient {
	return &celestiaServiceClient{cc}
}

func (c *celestiaServiceClient) StateRootSignIDs(ctx context.Context, in *StateRootSignIDsRequest, opts ...grpc.CallOption) (*StateRootSignIDsResponse, error) {
	out := new(StateRootSignIDsResponse)
	err := c.cc.Invoke(ctx, "/symbiotic_fp.proto_rpc.CelestiaService/StateRootSignIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CelestiaServiceServer is the server API for CelestiaService service.
// All implementations must embed UnimplementedCelestiaServiceServer
// for forward compatibility
type CelestiaServiceServer interface {
	StateRootSignIDs(context.Context, *StateRootSignIDsRequest) (*StateRootSignIDsResponse, error)
}

// UnimplementedCelestiaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCelestiaServiceServer struct {
}

func (UnimplementedCelestiaServiceServer) StateRootSignIDs(context.Context, *StateRootSignIDsRequest) (*StateRootSignIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StateRootSignIDs not implemented")
}

// UnsafeCelestiaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CelestiaServiceServer will
// result in compilation errors.
type UnsafeCelestiaServiceServer interface {
	mustEmbedUnimplementedCelestiaServiceServer()
}

func RegisterCelestiaServiceServer(s grpc.ServiceRegistrar, srv CelestiaServiceServer) {
	s.RegisterService(&CelestiaService_ServiceDesc, srv)
}

func _CelestiaService_StateRootSignIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateRootSignIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CelestiaServiceServer).StateRootSignIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/symbiotic_fp.proto_rpc.CelestiaService/StateRootSignIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CelestiaServiceServer).StateRootSignIDs(ctx, req.(*StateRootSignIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CelestiaService_ServiceDesc is the grpc.ServiceDesc for CelestiaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CelestiaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "symbiotic_fp.proto_rpc.CelestiaService",
	HandlerType: (*CelestiaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StateRootSignIDs",
			Handler:    _CelestiaService_StateRootSignIDs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "symbiotic-fp/protobuf/symbiotic_fp.proto",
}
